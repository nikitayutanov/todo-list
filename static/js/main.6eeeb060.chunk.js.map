{"version":3,"sources":["components/Heading/Heading.js","components/Input/Input.js","components/Task/Task.js","components/Controls/Controls.js","components/List/List.js","components/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["Heading","className","Input","props","addTask","searchTasks","useState","inputText","setInputText","inputMode","setInputMode","onSubmit","e","preventDefault","trim","type","value","onChange","target","autoFocus","name","id","defaultChecked","Task","task","toggleTaskCompletion","toggleTaskEditing","removeTask","textareaText","setTextareaText","textareaRef","useRef","resizeTextarea","current","style","height","scrollHeight","useLayoutEffect","isCompleted","checked","disabled","isEditing","rows","text","ref","readOnly","onClick","pos","length","focus","setSelectionRange","focusTextarea","Controls","filterButtons","setFilterButtons","clearTasks","clearCurrentSearch","handleFilterButtonClick","prevButtons","map","prevButton","isChecked","filterButton","index","htmlFor","List","tasks","searchQuery","filteredTasks","currentFilter","visibleTasks","getSearchedTasks","tasksToSearch","filter","includes","getVisibleTasks","getEmptyMessage","initFilterButtons","Todo","setTasks","setSearchQuery","isAnyTaskEditing","find","button","resetCurrentFilter","getFilteredTasks","Date","now","prevTasks","prevTask","changeTask","editTask","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6eeeb060.chunk.js","sourcesContent":["import './Heading.css';\r\n\r\nfunction Heading() {\r\n  return (\r\n    <header className=\"heading-section\">\r\n      <h1 className=\"heading\">TODO List</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Heading;","import './Input.css';\r\nimport { useState } from 'react';\r\n\r\nfunction Input(props) {\r\n  const { addTask, searchTasks } = props;\r\n  const [inputText, setInputText] = useState('');\r\n  const [inputMode, setInputMode] = useState('add');\r\n\r\n  const handleInputChange = ({ target: { value } }) => {\r\n    setInputText(value);\r\n  };\r\n\r\n  const handleInputModeChange = ({ target: { value } }) => {\r\n    setInputMode(value);\r\n  };\r\n\r\n  const handleButtonClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputText.trim()) {\r\n      switch (inputMode) {\r\n        case 'add':\r\n          addTask(inputText);\r\n          setInputText('');\r\n          break;\r\n        case 'search':\r\n          searchTasks(inputText);\r\n          break;\r\n        default:\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"form-section\">\r\n      <form className=\"form\" onSubmit={handleButtonClick}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form__input\"\r\n          value={inputText}\r\n          onChange={handleInputChange}\r\n          autoFocus\r\n        />\r\n        <input type=\"submit\" className=\"form__button\" value={inputMode} />\r\n      </form>\r\n      <div className=\"form-switch\" onChange={handleInputModeChange}>\r\n        <input\r\n          type=\"radio\"\r\n          name=\"form-switch-buttons\"\r\n          className=\"form-switch__button\"\r\n          id=\"form-switch__button--add\"\r\n          value=\"add\"\r\n          defaultChecked\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          name=\"form-switch-buttons\"\r\n          className=\"form-switch__button\"\r\n          id=\"form-switch__button--search\"\r\n          value=\"search\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import './Task.css';\r\nimport { useLayoutEffect, useRef } from 'react';\r\n\r\nfunction Task(props) {\r\n  const {\r\n    task,\r\n    toggleTaskCompletion,\r\n    toggleTaskEditing,\r\n    removeTask,\r\n    textareaText,\r\n    setTextareaText,\r\n  } = props;\r\n  const textareaRef = useRef(null);\r\n\r\n  const resizeTextarea = () => {\r\n    textareaRef.current.style.height = `auto`;\r\n    textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n  };\r\n\r\n  const focusTextarea = () => {\r\n    const pos = textareaRef.current.value.length;\r\n    textareaRef.current.focus();\r\n    textareaRef.current.setSelectionRange(pos, pos);\r\n  };\r\n\r\n  const handleTextareaChange = ({ target: { value } }) => {\r\n    setTextareaText(value);\r\n    resizeTextarea();\r\n  };\r\n\r\n  const handleEditButtonClick = () => {\r\n    toggleTaskEditing(task, textareaText, setTextareaText);\r\n    focusTextarea();\r\n  };\r\n\r\n  useLayoutEffect(resizeTextarea, []);\r\n\r\n  return (\r\n    <li className={task.isCompleted ? 'task task--completed' : 'task'}>\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"task__checkbox\"\r\n        onChange={() => toggleTaskCompletion(task)}\r\n        checked={task.isCompleted}\r\n        disabled={task.isEditing}\r\n      />\r\n      <div className=\"task__text-wrapper\">\r\n        <textarea\r\n          rows=\"1\"\r\n          className=\"task__text\"\r\n          value={task.isEditing ? textareaText : task.text}\r\n          ref={textareaRef}\r\n          onChange={handleTextareaChange}\r\n          readOnly={!task.isEditing}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"task__buttons\">\r\n        <button\r\n          className=\"task__button task__button--edit\"\r\n          onClick={handleEditButtonClick}\r\n          disabled={task.isCompleted}\r\n        ></button>\r\n        <button\r\n          className=\"task__button task__button--delete\"\r\n          onClick={() => removeTask(task)}\r\n        ></button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import './Controls.css';\r\n\r\nfunction Controls(props) {\r\n  const {\r\n    filterButtons,\r\n    setFilterButtons,\r\n    clearTasks,\r\n    clearCurrentSearch,\r\n  } = props;\r\n\r\n  const handleFilterButtonClick = ({ target: { value } }) => {\r\n    clearCurrentSearch();\r\n    setFilterButtons((prevButtons) =>\r\n      prevButtons.map((prevButton) =>\r\n        prevButton.text === value\r\n          ? { ...prevButton, isChecked: true }\r\n          : { ...prevButton, isChecked: false }\r\n      )\r\n    );\r\n  };\r\n\r\n  return (\r\n    <section className=\"controls\">\r\n      <button className=\"clear-button\" onClick={clearTasks}>\r\n        Clear\r\n      </button>\r\n      <div className=\"filter-buttons\">\r\n        {filterButtons.map((filterButton, index) => (\r\n          <div className=\"filter-button\" key={index}>\r\n            <label\r\n              className=\"filter-button__label\"\r\n              htmlFor={`filter-button--${filterButton.text}`}\r\n            >\r\n              {filterButton.text}\r\n            </label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"filter-buttons\"\r\n              className=\"filter-button__radio\"\r\n              id={`filter-button--${filterButton.text}`}\r\n              value={filterButton.text}\r\n              checked={filterButton.isChecked}\r\n              onChange={handleFilterButtonClick}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import './List.css';\r\nimport { Fragment, useState } from 'react';\r\nimport Task from '../Task/Task';\r\nimport Controls from '../Controls/Controls';\r\n\r\nfunction List(props) {\r\n  const {\r\n    tasks,\r\n    searchQuery,\r\n    filterButtons,\r\n    setFilterButtons,\r\n    filteredTasks,\r\n    currentFilter,\r\n    toggleTaskCompletion,\r\n    toggleTaskEditing,\r\n    removeTask,\r\n    clearTasks,\r\n    clearCurrentSearch,\r\n  } = props;\r\n\r\n  const [textareaText, setTextareaText] = useState('');\r\n\r\n  const getVisibleTasks = () => {\r\n    const getSearchedTasks = (tasksToSearch = tasks) => {\r\n      return tasksToSearch.filter((task) => task.text.includes(searchQuery));\r\n    };\r\n\r\n    if (searchQuery) {\r\n      const searchedTasks = filteredTasks.length\r\n        ? getSearchedTasks(filteredTasks)\r\n        : getSearchedTasks();\r\n\r\n      return searchedTasks;\r\n    }\r\n\r\n    return filteredTasks;\r\n  };\r\n\r\n  const getEmptyMessage = () => {\r\n    switch (currentFilter) {\r\n      case 'active':\r\n        return \"There's no active tasks.\";\r\n      case 'done':\r\n        return \"There's no completed tasks.\";\r\n      default:\r\n        return 'No tasks matching your search.';\r\n    }\r\n  };\r\n\r\n  const visibleTasks = getVisibleTasks();\r\n\r\n  return (\r\n    <Fragment>\r\n      {visibleTasks.length ? (\r\n        <ul className=\"tasks\">\r\n          {visibleTasks.map((task) => (\r\n            <Task\r\n              key={task.id}\r\n              task={task}\r\n              toggleTaskCompletion={toggleTaskCompletion}\r\n              toggleTaskEditing={toggleTaskEditing}\r\n              removeTask={removeTask}\r\n              textareaText={textareaText}\r\n              setTextareaText={setTextareaText}\r\n            />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p className=\"empty-message\">{getEmptyMessage()}</p>\r\n      )}\r\n      <Controls\r\n        filterButtons={filterButtons}\r\n        setFilterButtons={setFilterButtons}\r\n        clearTasks={clearTasks}\r\n        clearCurrentSearch={clearCurrentSearch}\r\n      />\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import './Todo.css';\r\nimport { useRef, useState } from 'react';\r\nimport Heading from './Heading/Heading';\r\nimport Input from './Input/Input';\r\nimport List from './List/List';\r\n\r\nconst initFilterButtons = [\r\n  { text: 'all', isChecked: true },\r\n  { text: 'active', isChecked: false },\r\n  { text: 'done', isChecked: false },\r\n];\r\n\r\nfunction Todo() {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [filterButtons, setFilterButtons] = useState(initFilterButtons);\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const isAnyTaskEditing = useRef(false);\r\n\r\n  const currentFilter = filterButtons.find((button) => button.isChecked).text;\r\n\r\n  const clearCurrentSearch = () => {\r\n    if (searchQuery) {\r\n      setSearchQuery('');\r\n    }\r\n  };\r\n\r\n  const resetCurrentFilter = () => {\r\n    if (currentFilter !== 'all') {\r\n      setFilterButtons(initFilterButtons);\r\n    }\r\n  };\r\n\r\n  const addTask = (inputText) => {\r\n    const task = {\r\n      text: inputText,\r\n      id: Date.now(),\r\n      isCompleted: false,\r\n      isEditing: false,\r\n    };\r\n\r\n    clearCurrentSearch();\r\n    resetCurrentFilter();\r\n    setTasks((prevTasks) => [...prevTasks, ...[task]]);\r\n  };\r\n\r\n  const removeTask = (task) => {\r\n    setTasks((prevTasks) =>\r\n      prevTasks.filter((prevTask) => prevTask.id !== task.id)\r\n    );\r\n\r\n    if (task.isEditing) {\r\n      isAnyTaskEditing.current = false;\r\n    }\r\n  };\r\n\r\n  const toggleTaskCompletion = (task) => {\r\n    setTasks((prevTasks) =>\r\n      prevTasks.map((prevTask) =>\r\n        prevTask.id === task.id\r\n          ? { ...task, isCompleted: !task.isCompleted }\r\n          : prevTask\r\n      )\r\n    );\r\n  };\r\n\r\n  const editTask = (task) => {\r\n    setTasks((prevTasks) =>\r\n      prevTasks.map((prevTask) =>\r\n        prevTask.id === task.id ? { ...task, isEditing: true } : prevTask\r\n      )\r\n    );\r\n\r\n    isAnyTaskEditing.current = true;\r\n  };\r\n\r\n  const changeTask = (task, textareaText) => {\r\n    if (textareaText.trim()) {\r\n      setTasks((prevTasks) =>\r\n        prevTasks.map((prevTask) =>\r\n          prevTask.id === task.id\r\n            ? { ...task, text: textareaText, isEditing: false }\r\n            : prevTask\r\n        )\r\n      );\r\n\r\n      isAnyTaskEditing.current = false;\r\n    }\r\n  };\r\n\r\n  const toggleTaskEditing = (task, textareaText, setTextareaText) => {\r\n    if (!task.isEditing && !isAnyTaskEditing.current) {\r\n      setTextareaText(task.text);\r\n      editTask(task);\r\n    } else if (task.isEditing && isAnyTaskEditing.current) {\r\n      changeTask(task, textareaText);\r\n      setTextareaText('');\r\n    }\r\n  };\r\n\r\n  const clearTasks = () => {\r\n    setTasks([]);\r\n\r\n    if (isAnyTaskEditing.current) {\r\n      isAnyTaskEditing.current = false;\r\n    }\r\n  };\r\n\r\n  const getFilteredTasks = () => {\r\n    switch (currentFilter) {\r\n      case 'active':\r\n        return tasks.filter((task) => !task.isCompleted);\r\n      case 'done':\r\n        return tasks.filter((task) => task.isCompleted);\r\n      default:\r\n        return tasks;\r\n    }\r\n  };\r\n\r\n  const filteredTasks = getFilteredTasks();\r\n\r\n  const searchTasks = (inputText) => {\r\n    if (!filteredTasks.length) {\r\n      resetCurrentFilter();\r\n    }\r\n\r\n    setSearchQuery(inputText);\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <Heading />\r\n      <Input addTask={addTask} searchTasks={searchTasks} />\r\n      <section className=\"tasks-section\">\r\n        {tasks.length ? (\r\n          <List\r\n            tasks={tasks}\r\n            filterButtons={filterButtons}\r\n            setFilterButtons={setFilterButtons}\r\n            filteredTasks={filteredTasks}\r\n            currentFilter={currentFilter}\r\n            toggleTaskCompletion={toggleTaskCompletion}\r\n            toggleTaskEditing={toggleTaskEditing}\r\n            removeTask={removeTask}\r\n            clearTasks={clearTasks}\r\n            clearCurrentSearch={clearCurrentSearch}\r\n            searchQuery={searchQuery}\r\n          />\r\n        ) : (\r\n          <p className=\"empty-message empty-message--main\">\r\n            You don't have any tasks atm.\r\n          </p>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import Todo from './components/Todo';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}