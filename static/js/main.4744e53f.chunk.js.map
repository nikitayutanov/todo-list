{"version":3,"sources":["components/Heading/Heading.jsx","constants.js","actions/actions.js","selectors.js","components/Input/Input.jsx","components/Task/Task.jsx","components/Controls/Controls.jsx","components/List/List.jsx","components/Todo.jsx","App.jsx","reducers/tasks.js","reducers/currentFilter.js","reducers/searchQuery.js","reducers/editingTask.js","reducers/index.js","store.js","index.js"],"names":["Heading","className","ADD_TASK","REMOVE_TASK","TOGGLE_TASK_COMPLETION","CHANGE_TASK","CLEAR_TASKS","SET_CURRENT_FILTER","RESET_CURRENT_FILTER","SET_SEARCH_QUERY","CLEAR_CURRENT_SEARCH","START_TASK_EDITING","SET_EDITING_TEXT","STOP_TASK_EDITING","changeTask","id","text","type","types","payload","clearCurrentSearch","stopTaskEditing","selectCurrentFilter","state","currentFilter","selectSearchQuery","searchQuery","selectFilteredTasks","tasks","filter","task","isCompleted","selectEditingTaskId","editingTask","selectEditingTaskText","selectIsAnyTaskEditing","addTask","Date","now","actions","resetCurrentFilter","setSearchQuery","selectors","Input","useState","inputText","setInputText","inputMode","setInputMode","filteredTasks","useSelector","editingTaskId","editingTaskText","isAnyTaskEditing","dispatch","useDispatch","onSubmit","e","preventDefault","trim","length","value","onChange","target","autoFocus","name","defaultChecked","removeTask","toggleTaskCompletion","startTaskEditing","setEditingText","Task","textareaRef","useRef","isTaskEditing","resizeTextarea","current","style","height","scrollHeight","useLayoutEffect","checked","disabled","rows","ref","readOnly","onClick","pos","focus","setSelectionRange","focusTextarea","filterButtons","setCurrentFilter","clearTasks","Controls","handleFilterButtonClick","map","filterButton","index","htmlFor","List","getSearchedTasks","tasksToSearch","includes","visibleTasks","getEmptyMessage","selectTasks","Todo","App","initialState","tasksReducer","action","currentFilterReducer","searchQueryReducer","editingTaskReducer","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4744e53f.chunk.js","sourcesContent":["import './Heading.css';\r\n\r\nfunction Heading() {\r\n  return (\r\n    <header className=\"heading-section\">\r\n      <h1 className=\"heading\">TODO List</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Heading;","export const ADD_TASK = 'ADD_TASK';\r\nexport const REMOVE_TASK = 'REMOVE_TASK';\r\nexport const TOGGLE_TASK_COMPLETION = 'TOGGLE_TASK_COMPLETION';\r\nexport const CHANGE_TASK = 'CHANGE_TASK';\r\nexport const CLEAR_TASKS = 'CLEAR_TASKS';\r\nexport const SEARCH_TASKS = 'SEARCH_TASKS';\r\n\r\nexport const SET_CURRENT_FILTER = 'SET_CURRENT_FILTER';\r\nexport const RESET_CURRENT_FILTER = 'RESET_CURRENT_FILTER';\r\n\r\nexport const SET_SEARCH_QUERY = 'SET_SEARCH_QUERY';\r\nexport const CLEAR_CURRENT_SEARCH = 'CLEAR_CURRENT_SEARCH';\r\n\r\nexport const START_TASK_EDITING = 'START_TASK_EDITING';\r\nexport const SET_EDITING_TEXT = 'SET_EDITING_TEXT';\r\nexport const STOP_TASK_EDITING = 'STOP_TASK_EDITING';\r\n","import * as types from '../constants.js';\r\n\r\nconst {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  TOGGLE_TASK_COMPLETION,\r\n  CHANGE_TASK,\r\n  CLEAR_TASKS,\r\n  SET_SEARCH_QUERY,\r\n  CLEAR_CURRENT_SEARCH,\r\n  SET_CURRENT_FILTER,\r\n  RESET_CURRENT_FILTER,\r\n  START_TASK_EDITING,\r\n  SET_EDITING_TEXT,\r\n  STOP_TASK_EDITING,\r\n} = types;\r\n\r\nexport const addTask = (text) => {\r\n  const id = Date.now();\r\n\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: { text, id },\r\n  };\r\n};\r\n\r\nexport const removeTask = (id) => ({\r\n  type: REMOVE_TASK,\r\n  payload: id,\r\n});\r\n\r\nexport const toggleTaskCompletion = (id) => ({\r\n  type: TOGGLE_TASK_COMPLETION,\r\n  payload: id,\r\n});\r\n\r\nexport const changeTask = (id, text) => ({\r\n  type: CHANGE_TASK,\r\n  payload: { id, text },\r\n});\r\n\r\nexport const clearTasks = () => ({\r\n  type: CLEAR_TASKS,\r\n});\r\n\r\nexport const setSearchQuery = (text) => ({\r\n  type: SET_SEARCH_QUERY,\r\n  payload: text,\r\n});\r\n\r\nexport const clearCurrentSearch = () => ({\r\n  type: CLEAR_CURRENT_SEARCH,\r\n});\r\n\r\nexport const setCurrentFilter = (value) => ({\r\n  type: SET_CURRENT_FILTER,\r\n  payload: value,\r\n});\r\n\r\nexport const resetCurrentFilter = () => ({\r\n  type: RESET_CURRENT_FILTER,\r\n});\r\n\r\nexport const startTaskEditing = (id, text) => ({\r\n  type: START_TASK_EDITING,\r\n  payload: { id, text },\r\n});\r\n\r\nexport const setEditingText = (text) => ({\r\n  type: SET_EDITING_TEXT,\r\n  payload: text,\r\n});\r\n\r\nexport const stopTaskEditing = () => ({\r\n  type: STOP_TASK_EDITING,\r\n});\r\n","export const selectCurrentFilter = (state) => state.currentFilter;\r\nexport const selectSearchQuery = (state) => state.searchQuery;\r\n\r\nexport const selectFilteredTasks = (state) => {\r\n  const { tasks, currentFilter } = state;\r\n\r\n  switch (currentFilter) {\r\n    case 'active':\r\n      return tasks.filter((task) => !task.isCompleted);\r\n    case 'done':\r\n      return tasks.filter((task) => task.isCompleted);\r\n    default:\r\n      return tasks;\r\n  }\r\n};\r\n\r\nexport const selectEditingTaskId = (state) => state.editingTask.id;\r\nexport const selectEditingTaskText = (state) => state.editingTask.text;\r\nexport const selectIsAnyTaskEditing = (state) => !!state.editingTask.id;\r\n","import './Input.css';\r\nimport * as actions from '../../actions/actions';\r\nimport * as selectors from '../../selectors';\r\nimport { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst {\r\n  addTask,\r\n  clearCurrentSearch,\r\n  resetCurrentFilter,\r\n  setSearchQuery,\r\n  changeTask,\r\n  stopTaskEditing,\r\n} = actions;\r\n\r\nconst {\r\n  selectFilteredTasks,\r\n  selectCurrentFilter,\r\n  selectSearchQuery,\r\n  selectEditingTaskId,\r\n  selectEditingTaskText,\r\n  selectIsAnyTaskEditing,\r\n} = selectors;\r\n\r\nfunction Input({ tasks }) {\r\n  const [inputText, setInputText] = useState('');\r\n  const [inputMode, setInputMode] = useState('add');\r\n\r\n  const filteredTasks = useSelector(selectFilteredTasks);\r\n  const currentFilter = useSelector(selectCurrentFilter);\r\n  const searchQuery = useSelector(selectSearchQuery);\r\n  const editingTaskId = useSelector(selectEditingTaskId);\r\n  const editingTaskText = useSelector(selectEditingTaskText);\r\n  const isAnyTaskEditing = useSelector(selectIsAnyTaskEditing);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleInputChange = ({ target: { value } }) => {\r\n    setInputText(value);\r\n  };\r\n\r\n  const handleInputModeChange = ({ target: { value } }) => {\r\n    setInputMode(value);\r\n  };\r\n\r\n  const handleButtonClick = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputText.trim()) {\r\n      if (isAnyTaskEditing) {\r\n        dispatch(changeTask(editingTaskId, editingTaskText));\r\n        dispatch(stopTaskEditing());\r\n      }\r\n\r\n      switch (inputMode) {\r\n        case 'add': {\r\n          if (searchQuery) {\r\n            dispatch(clearCurrentSearch());\r\n          }\r\n          if (currentFilter !== 'all') {\r\n            dispatch(resetCurrentFilter());\r\n          }\r\n\r\n          dispatch(addTask(inputText));\r\n          setInputText('');\r\n          break;\r\n        }\r\n\r\n        case 'search': {\r\n          if (tasks.length) {\r\n            if (!filteredTasks.length && currentFilter !== 'all') {\r\n              dispatch(resetCurrentFilter());\r\n            }\r\n\r\n            dispatch(setSearchQuery(inputText));\r\n          }\r\n          break;\r\n        }\r\n\r\n        default:\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"form-section\">\r\n      <form className=\"form\" onSubmit={handleButtonClick}>\r\n        <input\r\n          type=\"text\"\r\n          className=\"form__input\"\r\n          value={inputText}\r\n          onChange={handleInputChange}\r\n          autoFocus\r\n        />\r\n        <input type=\"submit\" className=\"form__button\" value={inputMode} />\r\n      </form>\r\n      <div className=\"form-switch\" onChange={handleInputModeChange}>\r\n        <input\r\n          type=\"radio\"\r\n          name=\"form-switch-buttons\"\r\n          className=\"form-switch__button\"\r\n          id=\"form-switch__button--add\"\r\n          value=\"add\"\r\n          defaultChecked\r\n        />\r\n        <input\r\n          type=\"radio\"\r\n          name=\"form-switch-buttons\"\r\n          className=\"form-switch__button\"\r\n          id=\"form-switch__button--search\"\r\n          value=\"search\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import './Task.css';\r\nimport * as actions from '../../actions/actions';\r\nimport * as selectors from '../../selectors';\r\nimport { useLayoutEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst {\r\n  selectEditingTaskId,\r\n  selectEditingTaskText,\r\n  selectIsAnyTaskEditing,\r\n} = selectors;\r\n\r\nconst {\r\n  removeTask,\r\n  toggleTaskCompletion,\r\n  changeTask,\r\n  startTaskEditing,\r\n  setEditingText,\r\n  stopTaskEditing,\r\n} = actions;\r\n\r\nfunction Task({ task }) {\r\n  const { text, id, isCompleted } = task;\r\n\r\n  const editingTaskId = useSelector(selectEditingTaskId);\r\n  const editingTaskText = useSelector(selectEditingTaskText);\r\n  const isAnyTaskEditing = useSelector(selectIsAnyTaskEditing);\r\n  const dispatch = useDispatch();\r\n  const textareaRef = useRef(null);\r\n\r\n  const isTaskEditing = id === editingTaskId;\r\n\r\n  const resizeTextarea = () => {\r\n    textareaRef.current.style.height = `auto`;\r\n    textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\r\n  };\r\n\r\n  const focusTextarea = () => {\r\n    const pos = textareaRef.current.value.length;\r\n    textareaRef.current.focus();\r\n    textareaRef.current.setSelectionRange(pos, pos);\r\n  };\r\n\r\n  const handleTextareaChange = ({ target: { value } }) => {\r\n    dispatch(setEditingText(value));\r\n    resizeTextarea();\r\n  };\r\n\r\n  const handleCompleteButtonClick = () => {\r\n    dispatch(toggleTaskCompletion(id));\r\n  };\r\n\r\n  const handleDeleteButtonClick = () => {\r\n    dispatch(removeTask(id));\r\n\r\n    if (isAnyTaskEditing) {\r\n      dispatch(stopTaskEditing());\r\n    }\r\n  };\r\n\r\n  const handleEditButtonClick = () => {\r\n    if (!isAnyTaskEditing) {\r\n      dispatch(startTaskEditing(id, text));\r\n      focusTextarea();\r\n    } else if (isTaskEditing && editingTaskText.trim()) {\r\n      dispatch(changeTask(id, editingTaskText));\r\n      dispatch(stopTaskEditing());\r\n    }\r\n  };\r\n\r\n  useLayoutEffect(resizeTextarea, []);\r\n\r\n  return (\r\n    <li className={isCompleted ? 'task task--completed' : 'task'}>\r\n      <input\r\n        type=\"checkbox\"\r\n        className=\"task__checkbox\"\r\n        onChange={handleCompleteButtonClick}\r\n        checked={isCompleted}\r\n        disabled={isTaskEditing}\r\n      />\r\n      <div className=\"task__text-wrapper\">\r\n        <textarea\r\n          rows=\"1\"\r\n          className=\"task__text\"\r\n          value={isTaskEditing ? editingTaskText : text}\r\n          ref={textareaRef}\r\n          onChange={handleTextareaChange}\r\n          readOnly={!isTaskEditing}\r\n        ></textarea>\r\n      </div>\r\n      <div className=\"task__buttons\">\r\n        <button\r\n          className=\"task__button task__button--edit\"\r\n          onClick={handleEditButtonClick}\r\n          disabled={isCompleted || (isAnyTaskEditing && !isTaskEditing)}\r\n        ></button>\r\n        <button\r\n          className=\"task__button task__button--delete\"\r\n          onClick={handleDeleteButtonClick}\r\n        ></button>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import './Controls.css';\r\nimport * as actions from '../../actions/actions';\r\nimport * as selectors from '../../selectors';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nconst filterButtons = ['all', 'active', 'done'];\r\n\r\nconst {\r\n  clearCurrentSearch,\r\n  setCurrentFilter,\r\n  clearTasks,\r\n  changeTask,\r\n  stopTaskEditing,\r\n} = actions;\r\n\r\nconst {\r\n  selectCurrentFilter,\r\n  selectSearchQuery,\r\n  selectEditingTaskId,\r\n  selectEditingTaskText,\r\n  selectIsAnyTaskEditing,\r\n} = selectors;\r\n\r\nfunction Controls() {\r\n  const currentFilter = useSelector(selectCurrentFilter);\r\n  const searchQuery = useSelector(selectSearchQuery);\r\n  const editingTaskId = useSelector(selectEditingTaskId);\r\n  const editingTaskText = useSelector(selectEditingTaskText);\r\n  const isAnyTaskEditing = useSelector(selectIsAnyTaskEditing);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClearButtonClick = () => {\r\n    if (isAnyTaskEditing) {\r\n      dispatch(stopTaskEditing());\r\n    }\r\n\r\n    dispatch(clearTasks());\r\n  };\r\n\r\n  const handleFilterButtonClick = ({ target: { value } }) => {\r\n    if (isAnyTaskEditing) {\r\n      dispatch(changeTask(editingTaskId, editingTaskText));\r\n      dispatch(stopTaskEditing());\r\n    }\r\n\r\n    if (searchQuery) {\r\n      dispatch(clearCurrentSearch());\r\n    }\r\n\r\n    dispatch(setCurrentFilter(value));\r\n  };\r\n\r\n  return (\r\n    <section className=\"controls\">\r\n      <button className=\"clear-button\" onClick={handleClearButtonClick}>\r\n        Clear\r\n      </button>\r\n      <div className=\"filter-buttons\">\r\n        {filterButtons.map((filterButton, index) => (\r\n          <div className=\"filter-button\" key={index}>\r\n            <label\r\n              className=\"filter-button__label\"\r\n              htmlFor={`filter-button--${filterButton}`}\r\n            >\r\n              {filterButton}\r\n            </label>\r\n            <input\r\n              type=\"radio\"\r\n              name=\"filter-buttons\"\r\n              className=\"filter-button__radio\"\r\n              id={`filter-button--${filterButton}`}\r\n              value={filterButton}\r\n              checked={filterButton === currentFilter}\r\n              onChange={handleFilterButtonClick}\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default Controls;\r\n","import './List.css';\r\nimport * as selectors from '../../selectors';\r\nimport { useSelector } from 'react-redux';\r\nimport Task from '../Task/Task';\r\nimport Controls from '../Controls/Controls';\r\n\r\nconst {\r\n  selectFilteredTasks,\r\n  selectCurrentFilter,\r\n  selectSearchQuery,\r\n} = selectors;\r\n\r\nfunction List({ tasks }) {\r\n  const filteredTasks = useSelector(selectFilteredTasks);\r\n  const currentFilter = useSelector(selectCurrentFilter);\r\n  const searchQuery = useSelector(selectSearchQuery);\r\n\r\n  const getSearchedTasks = (tasksToSearch = tasks) => {\r\n    return tasksToSearch.filter((task) => task.text.includes(searchQuery));\r\n  };\r\n\r\n  const getVisibleTasks = () => {\r\n    if (searchQuery) {\r\n      const searchedTasks = filteredTasks.length\r\n        ? getSearchedTasks(filteredTasks)\r\n        : getSearchedTasks();\r\n\r\n      return searchedTasks;\r\n    }\r\n\r\n    return filteredTasks;\r\n  };\r\n\r\n  const getEmptyMessage = () => {\r\n    switch (currentFilter) {\r\n      case 'active':\r\n        return \"There's no active tasks.\";\r\n      case 'done':\r\n        return \"There's no completed tasks.\";\r\n      default:\r\n        return 'No tasks matching your search.';\r\n    }\r\n  };\r\n\r\n  const visibleTasks = getVisibleTasks();\r\n\r\n  return (\r\n    <>\r\n      {visibleTasks.length ? (\r\n        <ul className=\"tasks\">\r\n          {visibleTasks.map((task) => (\r\n            <Task key={task.id} task={task} />\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p className=\"empty-message\">{getEmptyMessage()}</p>\r\n      )}\r\n      <Controls />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import './Todo.css';\r\nimport { useSelector } from 'react-redux';\r\nimport Heading from './Heading/Heading';\r\nimport Input from './Input/Input';\r\nimport List from './List/List';\r\n\r\nconst selectTasks = (state) => state.tasks;\r\n\r\nfunction Todo() {\r\n  const tasks = useSelector(selectTasks);\r\n\r\n  return (\r\n    <div className=\"todo\">\r\n      <Heading />\r\n      <Input tasks={tasks} />\r\n      <section className=\"tasks-section\">\r\n        {tasks.length ? (\r\n          <List tasks={tasks} />\r\n        ) : (\r\n          <p className=\"empty-message empty-message--main\">\r\n            You don't have any tasks atm.\r\n          </p>\r\n        )}\r\n      </section>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import Todo from './components/Todo';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Todo />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import * as types from '../constants';\r\n\r\nconst {\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  TOGGLE_TASK_COMPLETION,\r\n  CHANGE_TASK,\r\n  CLEAR_TASKS,\r\n} = types;\r\n\r\nconst initialState = [\r\n  {\r\n    text: '1',\r\n    id: '0',\r\n    isCompleted: false,\r\n  },\r\n  {\r\n    text: '2',\r\n    id: '1',\r\n    isCompleted: false,\r\n  },\r\n  {\r\n    text: '3',\r\n    id: '2',\r\n    isCompleted: false,\r\n  },\r\n];\r\n\r\nfunction tasksReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case ADD_TASK: {\r\n      const { text, id } = payload;\r\n\r\n      return [\r\n        ...state,\r\n\r\n        {\r\n          text,\r\n          id,\r\n          isCompleted: false,\r\n        },\r\n      ];\r\n    }\r\n\r\n    case REMOVE_TASK:\r\n      return state.filter((task) => task.id !== payload);\r\n\r\n    case TOGGLE_TASK_COMPLETION:\r\n      return state.map((task) =>\r\n        task.id === payload ? { ...task, isCompleted: !task.isCompleted } : task\r\n      );\r\n\r\n    case CHANGE_TASK: {\r\n      const { text, id } = payload;\r\n\r\n      return state.map((task) => (task.id === id ? { ...task, text } : task));\r\n    }\r\n\r\n    case CLEAR_TASKS:\r\n      return [];\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default tasksReducer;\r\n","import { SET_CURRENT_FILTER, RESET_CURRENT_FILTER } from '../constants';\r\n\r\nconst initialState = 'all';\r\n\r\nfunction currentFilterReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_CURRENT_FILTER:\r\n      return payload;\r\n    case RESET_CURRENT_FILTER: \r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default currentFilterReducer;\r\n","import { SET_SEARCH_QUERY, CLEAR_CURRENT_SEARCH } from '../constants';\r\n\r\nconst initialState = '';\r\n\r\nfunction searchQueryReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case SET_SEARCH_QUERY:\r\n      return payload;\r\n    case CLEAR_CURRENT_SEARCH: \r\n      return initialState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default searchQueryReducer;\r\n","import * as types from '../constants';\r\n\r\nconst { START_TASK_EDITING, SET_EDITING_TEXT, STOP_TASK_EDITING } = types;\r\n\r\nconst initialState = {\r\n  id: '',\r\n  text: '',\r\n};\r\n\r\nfunction editingTaskReducer(state = initialState, action) {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case START_TASK_EDITING: {\r\n      const { id, text } = payload;\r\n      return { id, text };\r\n    }\r\n\r\n    case SET_EDITING_TEXT:\r\n      return { ...state, text: payload };\r\n\r\n    case STOP_TASK_EDITING:\r\n      return initialState;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default editingTaskReducer;\r\n","import { combineReducers } from 'redux';\r\nimport tasksReducer from './tasks';\r\nimport currentFilterReducer from './currentFilter';\r\nimport searchQueryReducer from './searchQuery';\r\nimport editingTaskReducer from './editingTask';\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  currentFilter: currentFilterReducer,\r\n  searchQuery: searchQueryReducer,\r\n  editingTask: editingTaskReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import rootReducer from './reducers/index';\r\nimport { createStore } from 'redux';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nexport default store;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}